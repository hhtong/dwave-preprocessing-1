version: 2.1

orbs:
  win: circleci/windows@2.2.0

  test-3.9: &test-linux-template
    docker:
      - image: circleci/python:3.9

    steps:
      - checkout

      - restore_cache: &restore-cache-env
          key: v2-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ checksum "docs/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: &create-virtualenv
          name: Create virtual environment
          command: |
            python -m pip install virtualenv
            python -m virtualenv env

      - run: &install-requirements
          name: Install requirements
          command: |
            . env/bin/activate
            pip install -r requirements.txt -r tests/requirements.txt -r docs/requirements.txt
            pip install wheel twine

      - save_cache: &save-cache-env
          key: v2-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ checksum "docs/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}
          paths:
            - env

      - run: &build-extension
          name: Build extension
          command: env/bin/python setup.py build_ext --inplace

      - run: &build-package
          name: Build package
          command: env/bin/python setup.py sdist bdist_wheel

      - run: &run-python-tests
          name: Run Python tests
          command: env/bin/coverage run -m unittest discover

      - run: &upload-python-code-coverage
          name: Upload code coverage
          command: |
            . env/bin/activate
            codecov   # calls `coverage xml`, so we must activate venv

  test-3.8:
    <<: *test-linux-template
    docker:
      - image: circleci/python:3.8

  test-3.7:
    <<: *test-linux-template
    docker:
      - image: circleci/python:3.7

  test-3.6:
    <<: *test-linux-template
    docker:
      - image: circleci/python:3.6

  test-osx:
    parameters:
      python-version:
        type: string

    macos:
      xcode: "12.2.0"

    environment:
      # Force (lie about) macOS 10.9 binary compatibility.
      # Needed for properly versioned wheels.
      # See: https://github.com/MacPython/wiki/wiki/Spinning-wheels
      MACOSX_DEPLOYMENT_TARGET: 10.9

    steps:
      - checkout

      - run:
          name: install pyenv
          command: |
            brew install pyenv

      - restore_cache:
          keys:
            - pyenv-{{ .Environment.CIRCLE_JOB }}-xcode12.2.0

      - run:
          name: install python
          command: |
            pyenv install << parameters.python-version>> -s

      - save_cache:
          paths:
            - ~/.pyenv
          key: pyenv-{{ .Environment.CIRCLE_JOB }}-xcode12.2.0

      - run: &osx-install-template
          name: install
          command: |
            eval "$(pyenv init -)"
            pyenv local << parameters.python-version >>
            python -m pip install virtualenv
            python -m virtualenv env
            . env/bin/activate
            pip install -r requirements.txt
            pip install -r tests/requirements.txt

      - run: &unix-build-ext-template
          name: build
          command: |
            . env/bin/activate
            python setup.py build_ext --inplace

      - run:
          name: run tests
          command: |
            . env/bin/activate
            python --version
            coverage run -m unittest discover

      - run:
          name: codecov
          command: |
            . env/bin/activate
            codecov

  deploy-osx:
    parameters:
      python-version:
        type: string

    macos:
      xcode: "12.2.0"

    environment:
      # Force (lie about) macOS 10.9 binary compatibility.
      # Needed for properly versioned wheels.
      # See: https://github.com/MacPython/wiki/wiki/Spinning-wheels
      MACOSX_DEPLOYMENT_TARGET: 10.9

    steps:
      - checkout

      - run:
          name: install pyenv
          command: |
            brew install pyenv

      - run: *install-boost-osx-template

      - restore_cache:
          keys:
            - pyenv-{{ .Environment.CIRCLE_JOB }}-xcode12.2.0

      - run:
          name: install python
          command: |
            pyenv install << parameters.python-version>> -s

      - save_cache:
          paths:
            - ~/.pyenv
          key: pyenv-{{ .Environment.CIRCLE_JOB }}-xcode12.2.0

      - run: *osx-install-template

      - run:
          name: create bdist_wheel
          command: |
            . env/bin/activate
            python setup.py bdist_wheel

      - run:
          name: deploy
          command: |
            . env/bin/activate
            python -m pip install twine
            twine upload -u $PYPI_USERNAME -p $PYPI_PASSWORD --skip-existing ./dist/*

  test-win:
    parameters:
      python-version:
        type: string
      architecture:
        type: string

    executor:
      name: win/default

    environment:
      CL: /d2FH4-

    steps:
      - checkout

      - run: &win-install-python-template
          name: install python and create virtualenv
          command: |
            nuget install python<< parameters.architecture >> -Version << parameters.python-version >> -ExcludeVersion -OutputDirectory .
            .\python<< parameters.architecture >>\tools\python.exe --version
            .\python<< parameters.architecture >>\tools\python.exe -m pip install virtualenv
            .\python<< parameters.architecture >>\tools\python.exe -m virtualenv env

      - run: &win-install-dependencies-template
          name: install dependencies
          command: |
            env\Scripts\activate.ps1
            python --version
            pip install -r requirements.txt
            pip install -r tests\requirements.txt

      - run:
          name: build extension
          command: |
            env\Scripts\activate.ps1
            python setup.py build_ext --inplace

      - run:
          name: run unittests
          command: |
            env\Scripts\activate.ps1
            coverage run -m unittest discover

      - run:
          name: codecov
          command: |
            env\Scripts\activate.ps1
            codecov

  deploy-win:
    parameters:
      python-version:
        type: string
      architecture:
        type: string

    executor:
      name: win/default

    environment:
      CL: /d2FH4-

    steps:
      - checkout

      - run: *win-install-python-template

      - run: *win-install-dependencies-template

      - run:
          name: create wheel
          command: |
            env\Scripts\activate.ps1
            python setup.py bdist_wheel

      - store_artifacts:
          path: ./dist

      - run: &win-twine-template
          name: install twine and deploy
          command: |
            env\Scripts\activate.ps1
            python -m pip install twine
            twine upload -u $env:PYPI_USERNAME -p $env:PYPI_PASSWORD --skip-existing ./dist/*

  #
  # cpp tests
  #

  test-linux-cpp11:
    docker:
      # just use a python image, all we really want is debian
      - image: circleci/python:3.8-buster
    
    working_directory: ~/repo

    steps:
      - checkout

      - restore_cache: *restore-cache-env

      - run: *create-virtualenv

      - run: *install-requirements

      - save_cache: *save-cache-env

      - run:
          name: run cpp tests
          command: |
            . env/bin/activate
            make -C testscpp/ --always-make

  #
  # docs
  #

  test-docs:
    docker:
      - image: circleci/python:3.7

    steps:
      - checkout

      - restore_cache: *restore-cache-env

      - run: *create-virtualenv

      - run:
          name: install doxygen
          command: sudo apt-get install doxygen

      - run: *install-requirements

      - save_cache: *save-cache-env

      - run: *build-extension

      - run:
          name: Install package
          command: env/bin/pip install .

      - run: &build-docs
          name: Build docs
          command: |
            . env/bin/activate
            make -C docs/ cpp html

      - store_artifacts: &save-docs
          path: ./docs/build/html

      - run: &run-doctest
          name: Test docs
          command: |
            . env/bin/activate
            make -C docs/ doctest

  #
  # deploy linux
  #

  deploy-manylinux-64: &deploy-manylinux-template
    docker:
      - image: quay.io/pypa/manylinux1_x86_64

    steps:
      - checkout

      - run:
          name: Build wheels
          command: |
            for PYBIN in /opt/python/*/bin; do
              "${PYBIN}/python" -c "import sys; sys.exit((3,6)<=sys.version_info<(3,10))" && continue
              "${PYBIN}/pip" install -r requirements.txt
              "${PYBIN}/pip" wheel . -w ./wheelhouse
              "${PYBIN}/python" setup.py sdist -d ./dist
            done

      - run:
          name: Bundle shared libraries into wheels
          command: |
            for whl in ./wheelhouse/dwave*preprocessing*.whl; do
              auditwheel repair "$whl" -w ./dist
            done

      - store_artifacts:
          path: dist

      - run:
          name: Create virtual environment
          command: |
            pythons=(/opt/python/*/bin)
            python="${pythons[0]}"
            "$python/pip" install virtualenv
            "$python/python" -m virtualenv env

      - run: &upload-template
          name: Install twine and deploy
          command: |
            env/bin/pip install twine
            env/bin/twine upload -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD" --skip-existing ./dist/*

  deploy-manylinux-32:
    <<: *deploy-manylinux-template
    docker:
      - image: quay.io/pypa/manylinux1_i686


workflows:
  version: 2
  test:
    jobs:
      - test-3.9
      - test-3.8
      - test-3.7
      - test-3.6
      - test-linux-cpp11
      - test-docs

  deploy:
    jobs:
      - deploy-manylinux-64:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - deploy-manylinux-32:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - deploy-osx:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
          matrix:
            parameters:
              python-version: ["3.6.8", "3.7.5", "3.8.6", "3.9.0"]
      - deploy-win:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
          matrix:
            parameters:
              python-version: ["3.6.8", "3.7.5", "3.8.6", "3.9.0"]
              architecture: ["", "x86"]
